// Edit or remove this or the below line to regenerate on next build
// Hash: c2042850e87c92fbde39e8d07c8a028559f096ab55b1152e47a4f91d96ec6dd9

//////////////////////////////////////////
//
// THIS FILE IS AUTOMATICALLY GENERATED
//
// Facil 2.1.2
//
//////////////////////////////////////////

module DbGen

#nowarn "49"

open System
open System.ComponentModel
open System.Data
open System.Threading
open Microsoft.Data.SqlClient
open Microsoft.Data.SqlClient.Server
open Facil.Runtime.CSharp
open Facil.Runtime.GeneratedCodeUtils


[<EditorBrowsable(EditorBrowsableState.Never)>]
type InternalUseOnly = private | InternalUseOnly
[<EditorBrowsable(EditorBrowsableState.Never)>]
let internalUseOnlyValue = InternalUseOnly


module Scripts =


  module ``SelectFromTempTable`` =


    type ``TempTable`` (__: InternalUseOnly, fields: obj []) =

      [<EditorBrowsable(EditorBrowsableState.Never)>]
      member __.Fields = fields

      static member create
        (
          ``id``: int,
          ``description``: string option
        ) : ``TempTable`` =
        [|
          ``id`` |> box
          Option.toDbNull ``description`` |> box
        |]
        |> fun fields -> ``TempTable``(internalUseOnlyValue, fields)

      static member inline create (dto: ^a) : ``TempTable`` =
        [|
          (^a: (member ``id``: int) dto) |> box
          Option.toDbNull (^a: (member ``description``: string option) dto) |> box
        |]
        |> fun fields -> ``TempTable``(internalUseOnlyValue, fields)


  type ``SelectFromTempTable_Result`` =
    {
      ``id``: int
      ``description``: string option
    }


  [<EditorBrowsable(EditorBrowsableState.Never)>]
  type ``SelectFromTempTable_Executable`` (connStr: string, conn: SqlConnection, configureConn: SqlConnection -> unit, userConfigureCmd: SqlCommand -> unit, getSqlParams: unit -> SqlParameter [], tempTableData: seq<TempTableData>) =

    let configureCmd sqlParams (cmd: SqlCommand) =
      cmd.CommandText <- """-- SelectFromTempTable.sql
select id, description from #TempTable"""
      cmd.Parameters.AddRange sqlParams
      userConfigureCmd cmd

    let mutable ``ordinal_id`` = 0
    let mutable ``ordinal_description`` = 0

    let initOrdinals (reader: SqlDataReader) =
      ``ordinal_id`` <- reader.GetOrdinal "id"
      ``ordinal_description`` <- reader.GetOrdinal "description"

    let getItem (reader: SqlDataReader) =
      let ``id`` = reader.GetInt32 ``ordinal_id``
      let ``description`` = if reader.IsDBNull ``ordinal_description`` then None else reader.GetString ``ordinal_description`` |> Some
      {
        ``id`` = ``id``
        ``description`` = ``description``
      }

    member __.ExecuteAsync(?cancellationToken) =
      let sqlParams = getSqlParams ()
      executeQueryEagerAsync connStr conn configureConn (configureCmd sqlParams) initOrdinals getItem tempTableData (defaultArg cancellationToken CancellationToken.None)

    member this.AsyncExecute() =
      async {
        let! ct = Async.CancellationToken
        return! this.ExecuteAsync(ct) |> Async.AwaitTask
      }

    member __.ExecuteAsyncWithSyncRead(?cancellationToken) =
      let sqlParams = getSqlParams ()
      executeQueryEagerAsyncWithSyncRead connStr conn configureConn (configureCmd sqlParams) initOrdinals getItem tempTableData (defaultArg cancellationToken CancellationToken.None)

    member this.AsyncExecuteWithSyncRead() =
      async {
        let! ct = Async.CancellationToken
        return! this.ExecuteAsyncWithSyncRead(ct) |> Async.AwaitTask
      }

    member __.Execute() =
      let sqlParams = getSqlParams ()
      executeQueryEager connStr conn configureConn (configureCmd sqlParams) initOrdinals getItem tempTableData

    member __.LazyExecuteAsync(?cancellationToken) =
      let sqlParams = getSqlParams ()
      executeQueryLazyAsync connStr conn configureConn (configureCmd sqlParams) initOrdinals getItem tempTableData (defaultArg cancellationToken CancellationToken.None)

    member __.LazyExecuteAsyncWithSyncRead(?cancellationToken) =
      let sqlParams = getSqlParams ()
      executeQueryLazyAsyncWithSyncRead connStr conn configureConn (configureCmd sqlParams) initOrdinals getItem tempTableData (defaultArg cancellationToken CancellationToken.None)

    member __.LazyExecute() =
      let sqlParams = getSqlParams ()
      executeQueryLazy connStr conn configureConn (configureCmd sqlParams) initOrdinals getItem tempTableData

    member __.ExecuteSingleAsync(?cancellationToken) =
      let sqlParams = getSqlParams ()
      executeQuerySingleAsync connStr conn configureConn (configureCmd sqlParams) initOrdinals getItem tempTableData (defaultArg cancellationToken CancellationToken.None)

    member this.AsyncExecuteSingle() =
      async {
        let! ct = Async.CancellationToken
        return! this.ExecuteSingleAsync(ct) |> Async.AwaitTask
      }

    member __.ExecuteSingle() =
      let sqlParams = getSqlParams ()
      executeQuerySingle connStr conn configureConn (configureCmd sqlParams) initOrdinals getItem tempTableData


  type ``SelectFromTempTable`` private (connStr: string, conn: SqlConnection) =

    [<EditorBrowsable(EditorBrowsableState.Never)>]
    new() =
      failwith "This constructor is for aiding reflection and type constraints only"
      ``SelectFromTempTable``(null, null)

    [<EditorBrowsable(EditorBrowsableState.Never)>]
    member val connStr = connStr

    [<EditorBrowsable(EditorBrowsableState.Never)>]
    member val conn = conn

    [<EditorBrowsable(EditorBrowsableState.Never)>]
    member val configureConn : SqlConnection -> unit = ignore with get, set

    [<EditorBrowsable(EditorBrowsableState.Never)>]
    member val userConfigureCmd : SqlCommand -> unit = ignore with get, set

    [<EditorBrowsable(EditorBrowsableState.Never)>]
    member val userConfigureBulkCopy : SqlBulkCopy -> unit = ignore with get, set

    member this.ConfigureCommand(configureCommand: SqlCommand -> unit) =
      this.userConfigureCmd <- configureCommand
      this

    member this.ConfigureBulkCopy(configureBulkCopy: SqlBulkCopy -> unit) =
      this.userConfigureBulkCopy <- configureBulkCopy
      this

    static member WithConnection(connectionString, ?configureConnection: SqlConnection -> unit) =
      ``SelectFromTempTable``(connectionString, null).ConfigureConnection(?configureConnection=configureConnection)

    static member WithConnection(connection) = ``SelectFromTempTable``(null, connection)

    member private this.ConfigureConnection(?configureConnection: SqlConnection -> unit) =
      match configureConnection with
      | None -> ()
      | Some config -> this.configureConn <- config
      this

    [<EditorBrowsable(EditorBrowsableState.Never)>]
    member this.CreateTempTableData
      (
        ``TempTable``: seq<``SelectFromTempTable``.``TempTable``>
      ) =
      [
        TempTableData
          (
            "#TempTable",
            """
            create table #TempTable (
                id int NOT NULL PRIMARY KEY,
                description nvarchar(100)
            )

            """,
            (``TempTable`` |> Seq.map (fun x -> x.Fields)),
            2,
            Action<_> this.userConfigureBulkCopy
          )
      ]
    member this.WithParameters
      (
        ``tempTable``: seq<``SelectFromTempTable``.``TempTable``>
      ) =
      let getSqlParams () =
        [|
        |]
      let tempTableData =
        this.CreateTempTableData(
          ``tempTable``
        )
      ``SelectFromTempTable_Executable``(this.connStr, this.conn, this.configureConn, this.userConfigureCmd, getSqlParams, tempTableData)

    member inline this.WithParameters(dto: ^a) =
      let getSqlParams () =
        [|
        |]
      let tempTableData =
        this.CreateTempTableData(
          (^a: (member ``TempTable``: #seq<``SelectFromTempTable``.``TempTable``>) dto)
        )
      ``SelectFromTempTable_Executable``(this.connStr, this.conn, this.configureConn, this.userConfigureCmd, getSqlParams, tempTableData)
